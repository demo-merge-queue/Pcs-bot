name: Piperks CD Initializer
on:
  workflow_call:
    outputs:
      should-deploy-to-sandbox:
        description: 'Should we deploy to sandbox?'
        value: ${{ jobs.last-commit-check.outputs.deploy-to-sandbox }}
      should-deploy-to-demo:
        description: 'Should we deploy to demo?'
        value: ${{ jobs.last-commit-check.outputs.deploy-to-demo }}
      should-deploy-to-production:
        description: 'Should we deploy to production?'
        value: ${{ jobs.last-commit-check.outputs.deploy-to-production }}
      should-deploy-to-partner-portal-sandbox:
        description: 'Should we deploy partner-portal to sandbox?'
        value: ${{ jobs.last-commit-check.outputs.deploy-to-partner-portal-sandbox }}
      should-deploy-to-partner-portal-demo:
        description: 'Should we deploy partner-portal to demo?'
        value: ${{ jobs.last-commit-check.outputs.deploy-to-partner-portal-demo }}
      should-deploy-to-partner-portal-production:
        description: 'Should we deploy partner-portal to production?'
        value: ${{ jobs.last-commit-check.outputs.deploy-to-partner-portal-production }}

jobs:
  last-commit-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      apps-api-hash: ${{ steps.hash-calculation-all.outputs.apps-api-hash }}
      e2e-hash: ${{ steps.hash-calculation-all.outputs.apps-piperks-e2e-hash }}
      deploy-to-production: ${{ steps.last-commit-check.outputs.deploy-to-production }}
      deploy-to-sandbox: ${{ steps.last-commit-check.outputs.deploy-to-sandbox }}
      deploy-to-demo: ${{ steps.last-commit-check.outputs.deploy-to-demo }}
      deploy-to-partner-portal-sandbox: ${{ steps.last-commit-check.outputs.deploy-to-partner-portal-sandbox }}
      deploy-to-partner-portal-demo: ${{ steps.last-commit-check.outputs.deploy-to-partner-portal-demo }}
      deploy-to-partner-portal-production: ${{ steps.last-commit-check.outputs.deploy-to-partner-portal-production }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.after }}

      - id: get_last_commit
        run: echo "message=$(git log --format=%B -n 1 ${{ github.event.after }} | head -1)" >> $GITHUB_OUTPUT

      - name: last commit check
        id: last-commit-check
        run: |
          commit_message=$(echo "${{ steps.get_last_commit.outputs.message }}")
          echo "Commit message: $commit_message"
          if echo "$commit_message" | grep -q 'deploy'; then
            if echo "$commit_message" | grep -q 'sandbox'; then
              echo "deploy-to-sandbox=true" >> $GITHUB_OUTPUT
            else
              echo "deploy-to-sandbox=false" >> $GITHUB_OUTPUT
            fi

            if echo "$commit_message" | grep -q 'demo'; then
              echo "deploy-to-demo=true" >> $GITHUB_OUTPUT
            else
              echo "deploy-to-demo=false" >> $GITHUB_OUTPUT
            fi

            if echo "$commit_message" | grep -q 'production'; then
              echo "deploy-to-production=true" >> $GITHUB_OUTPUT
            else
              echo "deploy-to-production=false" >> $GITHUB_OUTPUT
            fi

            if echo "$commit_message" | grep -q 'partner-portal-sandbox'; then
              echo "deploy-to-partner-portal-sandbox=true" >> $GITHUB_OUTPUT
            else
              echo "deploy-to-partner-portal-sandbox=false" >> $GITHUB_OUTPUT
            fi

            if echo "$commit_message" | grep -q 'partner-portal-demo'; then
              echo "deploy-to-partner-portal-demo=true" >> $GITHUB_OUTPUT
            else
              echo "deploy-to-partner-portal-demo=false" >> $GITHUB_OUTPUT
            fi

            if echo "$commit_message" | grep -q 'partner-portal-production'; then
              echo "deploy-to-partner-portal-production=true" >> $GITHUB_OUTPUT
            else
              echo "deploy-to-partner-portal-production=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: SSH into vps instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.IP }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          port: 22
          script: whoami
