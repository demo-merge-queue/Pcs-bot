name: Piperks Backend Deployment
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: ['opened', 'edited', 'reopened', 'synchronize', 'ready_for_review']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      BUILD_APP: 'backend'
      BUILD_STAGE: 'staging'
      AWS_EBS_PLATFORM: 'Node.js'
      AWS_EBS_APPLICATION: 'Piperks-backend'
      AWS_EBS_ENVIRONMENT: 'testing'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Get environment variable from aws ssm
        uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        with:
          ssm-path: /${{ env.BUILD_STAGE }}/${{ env.BUILD_APP }}/test
          prefix: null
          decryption: true
          
      - name: Output Bardavon Actions
        env:
          CNAME: ${{ env.AWS_DEFAULT_REGION }}
        run: | 
          echo "$CNAME"
          echo ${{ env.AWS_DEFAULT_REGION }}
          if [ ${{ env.AWS_DEFAULT_REGION }} = ap-southeast-1 ]; then
            echo "true"
          else
            echo "false"
          fi

      # - name: Parse and set environment variables
      #   run: |
      #     echo "${{ env.API_KEYS_JSON }}" > keys.json
      #     envs=$(jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | join("\n")' keys.json)
      #     echo "$envs" >> $GITHUB_ENV

      # - name: Create .env file
      #   id: create-env
      #   uses: SpicyPizza/create-envfile@v2.0
      #   with:
      #     envkey_API_KEYS_JSON: ${{ env.API_KEYS_JSON }}
      #     envkey_API_KEYS: ${{ toJSON(env.API_KEYS_JSON) }}
      #     envkey_SANDBOX_MODE: false
      #     envkey_DEMO_MODE: false
      #     envkey_PLAYGROUND: false
      #     envkey_API_DOCS_PATH: /docs
      #     fail_on_empty: true
          
      # - name: Read .env file contents
      #   run: |
      #     echo "Contents of .env file:"
      #     cat .env

      # - name: Save .env file as artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: env-file
      #     path: .env
      
      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_ID_DATABASE_URL: ${{ env.ID_DATABASE_URL }}
          envkey_KR_DATABASE_URL: ${{ env.KR_DATABASE_URL }}
          envkey_MASTER_DATABASE_URL: ${{ env.MASTER_DATABASE_URL }}
          REDIS_DOMAIN: ${{ env.REDIS_DOMAIN }}
          envkey_REDIS_PORT_NUMBER: ${{ env.REDIS_PORT_NUMBER }}
          envkey_REDIS_CLUSTER_PASSWORD: ${{ env.REDIS_CLUSTER_PASSWORD }}
          envkey_GCP_SERVICE_ACCOUNT: ${{ env.GCP_SERVICE_ACCOUNT }}
          envkey_SERVER_DOMAIN: ${{ env.SERVER_DOMAIN }}
          envkey_DOMAIN: ${{ env.DOMAIN }}
          envkey_FIREBASE_API_KEY: ${{ env.FIREBASE_API_KEY }}
          envkey_SENDGRID_API_KEY: ${{ env.SENDGRID_API_KEY }}
          envkey_ENCRYPT_KEY: ${{ env.ENCRYPT_KEY }}
          envkey_ENCRYPT_IVS: ${{ env.ENCRYPT_IVS }}
          envkey_SENTRY_DSN: ${{ env.SENTRY_DSN }}
          envkey_GOOGLE_CLIENT_ID: ${{ env.GOOGLE_CLIENT_ID }}
          envkey_ENVIRONMENT: ${{ env.ENVIRONMENT }}
          envkey_NODE_ENV: ${{ env.NODE_ENV }}
          # TODO: Retrieve API KEYS JSON from the SSM for dynamic configuration.
          # Note: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2 currently does not handle nested JSON properties properly,
          # causing formatting issues, investigate this further to use keys from SSM.
          envkey_API_KEYS_JSON: '{
            "INGENICO_API_KEY":"ingenico_testapikey",
            "FMI_API_KEY":"fmi_testapikey",
            "MOCKPOS_API_KEY":"mockpos_testapikey",
            "DEMO_PRINT_DRIVER_COMPANY":"demoprintdriver_testapikey",
            "KOOMI_API_KEY":"koomi_testapikey",
            "PAX_TERMINAL_DEMO_API_KEY":"paxterminal_testapikey"
            }'
          envkey_JWT_EXPIRY: ${{ env.JWT_EXPIRY }}
          envkey_JWT_SECRET: ${{ env.JWT_SECRET }}
          envkey_JWT_AUDIENCE: ${{ env.JWT_AUDIENCE }}
          envkey_JWT_PROVIDER: ${{ env.JWT_PROVIDER }}
          envkey_TEST_ACCOUNT_UID: test
          envkey_LINE_CLIENT_ID: ${{ env.LINE_CLIENT_ID }}
          envkey_LINE_CLIENT_SECRET: ${{ env.LINE_CLIENT_SECRET }}
          envkey_SANDBOX_MODE: ${{ env.SANDBOX_MODE }}
          envkey_DEMO_MODE: ${{ env.DEMO_MODE }}
          envkey_PLAYGROUND: ${{ env.PLAYGROUND }}
          envkey_API_DOCS_PATH: ${{ env.API_DOCS_PATH }}
          fail_on_empty: true

      - name: Install EB CLI using pip
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      - name: Initialize EB CLI
        run: |
          eb init ${{ env.AWS_EBS_APPLICATION }} --region ${{ env.AWS_DEFAULT_REGION }} --platform ${{ env.AWS_EBS_PLATFORM }}
          eb use ${{ env.AWS_EBS_ENVIRONMENT }}

      - name: Get Elastic Beanstalk blue environment name
        id: target-blue-env
        run: |
          for ebs_env in $(eb list | awk '{print $1}'); do
            ebs_env_cname=$(eb status $ebs_env | grep "CNAME:" | awk '{print $2}')
            echo "$ebs_env_cname"
            echo "ebs_env" $ebs_env
            [ "$ebs_env_cname" = ${{ env.CNAME }} ] && blue_env_name="$ebs_env" 
          done

          echo "blue_env_name=$blue_env_name" >> $GITHUB_OUTPUT
          echo "blue_env_name:" "$blue_env_name"
          if [ -n "$blue_env_name" ]; then
            echo "Blue environment found: $blue_env_name"
          else
            echo "Elastic Beanstalk blue environment for: ${{ env.NODE_ENV }} not found"
            exit 1
          fi

      - name: Create and populate ebextensions security group config file
        run: |
          mkdir -p .ebextensions
          cat <<EOF > .ebextensions/security-group.config
          option_settings:
            aws:elbv2:loadbalancer:
              ManagedSecurityGroup: ${{ env.ELB_MANAGED_SECURITY_GROUP_ID }}
              SecurityGroups: ${{ env.ELB_MANAGED_SECURITY_GROUP_ID }}

            aws:autoscaling:launchconfiguration:
              SecurityGroups: ${{ env.EBS_MANAGED_SECURITY_GROUP_NAME }}
          EOF

      # - id: get_last_commit_hash
      #   run: | 
      #     echo "last_commit_hash=$(git log --format=%h -n 1 ${{ github.event.after }} | head -1)" >> $GITHUB_OUTPUT
      #     echo ${{github.event.pull_request.head.sha}}
      #     latest_commit_sha=${{ github.event.pull_request.head.sha }}
      #     first_eight_chars="${latest_commit_sha:0:8}"
      #     echo "First 8 characters of SHA: $first_eight_chars"

          
      - name: Create Elastic Beanstalk green environment and deploy
        id: target-green-env
        run: |
          latest_commit_sha=${{ github.event.pull_request.head.sha }}
          echo "green_env_name"=${{ env.NODE_ENV }}-${latest_commit_sha:0:8}-${{ github.run_id }}-${{ github.run_attempt }} >> $GITHUB_OUTPUT
          # eb create "$green_env_name" --cfg ${{ env.NODE_ENV }} --sample --instance-types t2.micro,t2.small

      - name: Print green env name
        run: | 
          echo "green_env_name:" ${{ steps.target-green-env.outputs.green_env_name }}
          echo "blue_env_name:" ${{ steps.target-blue-env.outputs.blue_env_name }}

      - name: Swap cname and switch traffic to green environment
        run: |
          eb swap ${{ steps.target-blue-env.outputs.blue_env_name }} ${{ steps.target-green-env.outputs.green_env_name }}

      - name: Terminate staging-blue environment
        if: ${{ env.NODE_ENV == 'staging' }}
        run: |
          eb terminate ${{ steps.target-blue-env.outputs.blue_env_name }}
          
  deploy_frontend:
    needs: build
    name: Piperks Frontend Deployment
    runs-on: ubuntu-latest

    env:
      AWS_SSM_BUILD_APP: 'web'
      BUILD_APP: 'web'
      BUILD_STAGE: 'staging'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.after }}

      - name: Get environment variable from aws ssm
        uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        with:
          ssm-path: /${{ env.BUILD_STAGE }}/${{ env.BUILD_APP }}/test
          prefix: null
          decryption: true

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.CLOUDFLARE_PROJECT_NAME}}
          directory: ./dist/apps/piperks
          wranglerVersion: '3'

