name: Piperks Backend Deployment
on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      BUILD_APP: 'backend'
      BUILD_STAGE: 'staging'
      AWS_EBS_PLATFORM: 'Node.js'
      AWS_EBS_APPLICATION: 'Piperks-backend'
      AWS_EBS_ENVIRONMENT: 'testing'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # - name: Set up AWS CLI
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Create CloudWatch Event Rule
      #   run: |
      #     aws events put-rule --name "ScheduledCleanupRule" \
      #       --schedule-expression "rate(1 hour)"

      # - name: Add Lambda Target to the Rule
      #   run: |
      #     aws events put-targets --rule "ScheduledCleanupRule" \
      #       --targets "Id"="1","Arn"=${{ vars.AWS_EBS_ENV_CLEANUP_LAMBDA_FUNCTION_ARN }}

      # - name: Enable Rule
      #   run: |
      #     aws events enable-rule --name "ScheduledCleanupRule"

      - name: Get environment variable from aws ssm
        uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        with:
          ssm-path: /${{ env.BUILD_STAGE }}/${{ env.BUILD_APP }}/test
          prefix: null
          decryption: true
          
      # - name: Output Bardavon Actions
      #   env:
      #     CNAME: ${{ env.AWS_DEFAULT_REGION }}
      #   run: | 
      #     echo "$CNAME"
      #     echo ${{ env.AWS_DEFAULT_REGION }}
      #     if [ ${{ env.AWS_DEFAULT_REGION }} = ap-southeast-1 ]; then
      #       echo "true"
      #     else
      #       echo "false"
      #     fi

      # - name: Parse and set environment variables
      #   run: |
      #     echo "${{ env.API_KEYS_JSON }}" > keys.json
      #     envs=$(jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | join("\n")' keys.json)
      #     echo "$envs" >> $GITHUB_ENV

      # - name: Create .env file
      #   id: create-env
      #   uses: SpicyPizza/create-envfile@v2.0
      #   with:
      #     envkey_API_KEYS_JSON: ${{ env.API_KEYS_JSON }}
      #     envkey_API_KEYS: ${{ toJSON(env.API_KEYS_JSON) }}
      #     envkey_SANDBOX_MODE: false
      #     envkey_DEMO_MODE: false
      #     envkey_PLAYGROUND: false
      #     envkey_API_DOCS_PATH: /docs
      #     fail_on_empty: true
          
      # - name: Read .env file contents
      #   run: |
      #     echo "Contents of .env file:"
      #     cat .env

      # - name: Save .env file as artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: env-file
      #     path: .env
      - name: Install Python 3.9
        if: ${{ inputs.app-name != 'merchant-portal' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install EB CLI using pip
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      - name: Initialize EB CLI
        if: ${{ inputs.app-name != 'merchant-portal' }}
        run: |
          eb init ${{ env.AWS_EBS_APPLICATION }} --region ${{ env.AWS_DEFAULT_REGION }} --platform ${{ env.AWS_EBS_PLATFORM }}

      - name: Get Elastic Beanstalk blue environment name
        id: target-blue-env
        shell: sh
        run: |
          ebs_envs=$(eb list --all | awk '{if ($1 == "*") print $2; else print $1}')
          echo "$ebs_envs"
          for ebs_env in $ebs_envs; do
            ebs_env_cname=$(eb status $ebs_env | grep "CNAME:" | awk '{print $2}')
            echo "$ebs_env_cname"
            [ "$ebs_env_cname" = 'staging-5.ap-southeast-1.elasticbeanstalk.com' ] && blue_env_name="$ebs_env"
          done

          echo "$blue_env_name"
          echo "blue_env_name=$blue_env_name" >> $GITHUB_OUTPUT
          if [ -n "$blue_env_name" ]; then
            echo "Blue environment found: $blue_env_name"
          else
            echo "Elastic Beanstalk blue environment for: not found"
            exit 1
          fi

      # - name: Initialize EB CLI
      #   run: |
      #     eb init ${{ env.AWS_EBS_APPLICATION }} --region ${{ env.AWS_DEFAULT_REGION }} --platform ${{ env.AWS_EBS_PLATFORM }}
      #     eb use ${{ env.AWS_EBS_ENVIRONMENT }}

      # - name: Get Elastic Beanstalk blue environment name
      #   id: target-blue-env
      #   run: |
      #     for ebs_env in $(eb list | awk '{print $1}'); do
      #       ebs_env_cname=$(eb status $ebs_env | grep "CNAME:" | awk '{print $2}')
      #       [ "$ebs_env_cname" = ${{ env.CNAME }} ] && blue_env_name="$ebs_env" >> $GITHUB_OUTPUT
      #     done

      #     if [ -n "$blue_env_name" ]; then
      #       echo "Blue environment found: $blue_env_name"
      #     else
      #       echo "Elastic Beanstalk blue environment for: ${{ env.NODE_ENV }} not found"
      #       exit 1
      #     fi

      # - name: Get Elastic Beanstalk blue environment name
      #   id: target-blue-env
      #   run: |
      #     echo ${{ env.CNAME }}
      #     for ebs_env in $(eb list | awk '{print $1}'); do
      #       ebs_env_cname=$(eb status $ebs_env | grep "CNAME:" | awk '{print $2}')
      #       [ "$ebs_env_cname" = ${{ env.CNAME }} ] && blue_env_name="$ebs_env" >> $GITHUB_OUTPUT
      #     done
          
      #     if [ -n "$blue_env_name" ]; then
      #       echo "Blue environment found: $blue_env_name"
      #     else
      #       echo "Elastic beanstalk blue environment not found"
      #       exit 1
      #     fi

