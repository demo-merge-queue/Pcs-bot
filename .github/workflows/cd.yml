name: Piperks Backend Deployment
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      BUILD_APP: 'backend'
      BUILD_STAGE: 'staging'
      AWS_EBS_PLATFORM: 'Node.js'
      AWS_EBS_APPLICATION: 'Piperks-backend'
      AWS_EBS_ENVIRONMENT: 'testing'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Get environment variable from aws ssm
        uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        with:
          ssm-path: /${{ env.BUILD_STAGE }}/${{ env.BUILD_APP }}/STAGING_ENV
          prefix: null
          decryption: true
          
      # - name: Output Bardavon Actions
      #   run: echo $STAGING_ENV
        
      # - name: Parse and set environment variables
      #   run: |
      #     echo "${{ env.API_KEYS_JSON }}" > keys.json
      #     envs=$(jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | join("\n")' keys.json)
      #     echo "$envs" >> $GITHUB_ENV

      # - name: Create .env file
      #   id: create-env
      #   uses: SpicyPizza/create-envfile@v2.0
      #   with:
      #     envkey_API_KEYS_JSON: ${{ env.API_KEYS_JSON }}
      #     envkey_API_KEYS: ${{ toJSON(env.API_KEYS_JSON) }}
      #     envkey_SANDBOX_MODE: false
      #     envkey_DEMO_MODE: false
      #     envkey_PLAYGROUND: false
      #     envkey_API_DOCS_PATH: /docs
      #     fail_on_empty: true
          
      # - name: Read .env file contents
      #   run: |
      #     echo "Contents of .env file:"
      #     cat .env

      # - name: Save .env file as artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: env-file
      #     path: .env
      - name: Install EB CLI using pip
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      - name: Initialize EB CLI
        run: |
          eb init ${{ env.AWS_EBS_APPLICATION }} --region ${{ env.AWS_DEFAULT_REGION }} --platform ${{ env.AWS_EBS_PLATFORM }}
          eb use ${{ env.AWS_EBS_ENVIRONMENT }}

      # - name: Elastic Beanstalk Health Check
      #   run: |
      #     eb health ${{ env.AWS_EBS_ENVIRONMENT }} | awk 'NR>2 && $2 == "ok" {getline; if ($2 == 0) {exit_status=0}} END {exit exit_status}'
      #     exit_status=$?

      - name: Retry Step
        id: retry
        run: |
            retry_count=0
            while [ $retry_count -lt 2 ]; do
              health_code=$(eb health testing | awk 'NR==4 && $2=="ok" {getline; if ($5==1) {health_code=1} else {health_code=0}}; END {print health_code}')
              echo "Health Code: $health_code"
              if [ "$health_code" -eq 1 ]; then
                echo "Server health: ok"
                exit 0
              elif [ "$health_code" -eq 0 ]; then
                echo "Server health: not ok, retry in 90 seconds"
                sleep 3
                retry_count=$((retry_count + 1))
              else
                echo "Invalid health code"
                exit 1
              fi
            done
            echo "Server health: not ok"
            exit 1









