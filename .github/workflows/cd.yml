name: Piperks Backend Deployment
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: ['opened', 'edited', 'reopened', 'synchronize', 'ready_for_review']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      BUILD_APP: 'backend'
      BUILD_STAGE: 'staging'
      AWS_EBS_PLATFORM: 'Node.js'
      AWS_EBS_APPLICATION: 'Piperks-backend'
      AWS_EBS_ENVIRONMENT: 'testing'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Get environment variable from aws ssm
        uses: Bardavon-Health/actions-aws-ssm-params-to-env@v1.2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        with:
          ssm-path: /${{ env.BUILD_STAGE }}/${{ env.BUILD_APP }}/test
          prefix: null
          decryption: true
          
      - name: Output Bardavon Actions
        env:
          CNAME: ${{ env.AWS_DEFAULT_REGION }}
        run: | 
          echo "$CNAME"
          echo ${{ env.AWS_DEFAULT_REGION }}
          if [ ${{ env.AWS_DEFAULT_REGION }} = ap-southeast-1 ]; then
            echo "true"
          else
            echo "false"
          fi

      # - name: Parse and set environment variables
      #   run: |
      #     echo "${{ env.API_KEYS_JSON }}" > keys.json
      #     envs=$(jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | join("\n")' keys.json)
      #     echo "$envs" >> $GITHUB_ENV

      # - name: Create .env file
      #   id: create-env
      #   uses: SpicyPizza/create-envfile@v2.0
      #   with:
      #     envkey_API_KEYS_JSON: ${{ env.API_KEYS_JSON }}
      #     envkey_API_KEYS: ${{ toJSON(env.API_KEYS_JSON) }}
      #     envkey_SANDBOX_MODE: false
      #     envkey_DEMO_MODE: false
      #     envkey_PLAYGROUND: false
      #     envkey_API_DOCS_PATH: /docs
      #     fail_on_empty: true
          
      # - name: Read .env file contents
      #   run: |
      #     echo "Contents of .env file:"
      #     cat .env

      # - name: Save .env file as artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: env-file
      #     path: .env
      
      - name: Install EB CLI using pip
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      - name: Initialize EB CLI
        run: |
          eb init ${{ env.AWS_EBS_APPLICATION }} --region ${{ env.AWS_DEFAULT_REGION }} --platform ${{ env.AWS_EBS_PLATFORM }}
          eb use ${{ env.AWS_EBS_ENVIRONMENT }}

      - name: Get Elastic Beanstalk blue environment name
        id: target-blue-env
        run: |
          for ebs_env in $(eb list | awk '{print $1}'); do
            ebs_env_cname=$(eb status $ebs_env | grep "CNAME:" | awk '{print $2}')
            echo "$ebs_env_cname"
            [ "$ebs_env_cname" = ${{ env.CNAME }} ] && echo "blue_env_name=("$ebs_env")" >> $GITHUB_OUTPUT
          done

          echo "blue_env_name:" "$blue_env_name"
          if [ -n "$blue_env_name" ]; then
            echo "Blue environment found: $blue_env_name"
          else
            echo "Elastic Beanstalk blue environment for: ${{ env.NODE_ENV }} not found"
            exit 1
          fi

      - name: Create and populate ebextensions security group config file
        run: |
          mkdir -p .ebextensions
          cat <<EOF > .ebextensions/security-group.config
          option_settings:
            aws:elbv2:loadbalancer:
              ManagedSecurityGroup: ${{ env.ELB_MANAGED_SECURITY_GROUP_ID }}
              SecurityGroups: ${{ env.ELB_MANAGED_SECURITY_GROUP_ID }}

            aws:autoscaling:launchconfiguration:
              SecurityGroups: ${{ env.EBS_MANAGED_SECURITY_GROUP_NAME }}
          EOF

      - id: get_last_commit_hash
        run: echo "last_commit_hash=$(git log --format=%h -n 1 ${{ github.event.after }} | head -1)" >> $GITHUB_OUTPUT

      - name: Create Elastic Beanstalk green environment and deploy
        id: target-green-env
        run: |
          echo "green_env_name=${{ env.NODE_ENV }}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}" >> $GITHUB_OUTPUT
          echo "green_env_name: $green_env_name"
          echo "rsha:" $(git rev-parse --short HEAD)
          echo "sha:" ${{ github.sha }}
          # eb create "$green_env_name" --cfg ${{ env.NODE_ENV }} --sample --instance-types t2.micro,t2.small

      - name: Print green env name
        run: | 
          echo "green_env_name:" ${{ steps.target-green-env.outputs.green_env_name }}
          echo "blue_env_name:" ${{ steps.target-green-env.outputs.blue_env_name }}
