on:
  pull_request:
    types: [labeled, synchronize]

jobs:
  auto-queue:
    if: ${{ github.event_name == 'workflow_run' || github.event.pull_request }}
    runs-on: ubuntu-latest
    steps:
      - name: Check label + Sonar
        uses: actions/github-script@v7
        id: check
        with:
          script: |
            const pr = github.context.payload.pull_request || (await github.rest.pulls.get({owner: context.repo.owner, repo: context.repo.repo, pull_number: github.context.payload.workflow_run.pull_requests[0].number})).data;
            const hasLabel = pr.labels.some(l => l.name === 'merge-when-ready');
            if (!hasLabel) return core.setFailed('Label missing');
            const checks = await github.rest.checks.listForRef({owner: context.repo.owner, repo: context.repo.repo, ref: pr.head.sha});
            const passed = checks.data.check_runs.some(cr => cr.name === 'validate-pr' && cr.conclusion === 'success');
            if (!passed) return core.setFailed('Sonar coverage failed');
            core.setOutput('prId', pr.node_id);

      - name: Enqueue PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.graphql(`
              mutation($prId: ID!) {
                enqueuePullRequest(input:{pullRequestId:$prId}) { clientMutationId }
              }`, { prId: '${{ steps.check.outputs.prId }}' });

      - name: ðŸ“¬ Notify
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: github.context.payload.pull_request?.number || github.context.payload.workflow_run.pull_requests[0].number,
              body: "âœ… Enqueued via API â€” please check merge-group CI. If it doesn't start, enqueue manually."
            });
