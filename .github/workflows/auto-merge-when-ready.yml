name: Auto Enqueue PR to Merge Queue

on:
  pull_request:
    types: [labeled, synchronize]

jobs:
  auto-enqueue:
    if: github.event.pull_request.state == 'open'
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Check label and sonar status
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const run = async ({ github, context, core }) => {
              const pr = context.payload.pull_request;
              const prNumber = pr.number;

              // Check label
              const hasLabel = pr.labels.some(l => l.name === 'merge-when-ready');
              if (!hasLabel) {
                core.setFailed("❌ PR does not have the 'merge-when-ready' label.");
                return;
              }

              // Get latest checks for the commit
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });

              const sonar = checkRuns.check_runs.find(cr => cr.name === 'validate-pr');
              if (!sonar || sonar.conclusion !== 'success') {
                core.setFailed("❌ 'sonarqube-coverage-report' has not passed.");
                return;
              }

              // Success — pass node_id and number
              core.setOutput('prId', pr.node_id);
              core.setOutput('prNumber', prNumber.toString());
            };

            run({ github, context, core });

      - name: Enqueue PR into merge queue
        if: success()
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        with:
          script: |
            const run = async ({ github, core }) => {
              const prId = '${{ steps.check.outputs.prId }}';
              if (!prId) {
                throw new Error("❌ PR Node ID not found.");
              }

              await github.graphql(`
                mutation($prId: ID!) {
                  enqueuePullRequest(input: {pullRequestId: $prId}) {
                    clientMutationId
                  }
                }
              `, { prId });

              console.log("✅ PR enqueued to merge queue.");
            };

            run({ github, core });

      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const run = async ({ github, context }) => {
              const prNumber = parseInt('${{ steps.check.outputs.prNumber }}', 10);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: "✅ This PR has passed SonarQube and has the `merge-when-ready` label. It has been **enqueued** to the GitHub merge queue."
              });
            };
            run({ github, context });
