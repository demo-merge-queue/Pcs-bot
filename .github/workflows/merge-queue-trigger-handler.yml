name: Handle Merge Queue Trigger
on:
  issue_comment:
    types: [created]

jobs:
  comment-handle:
    if: (contains(github.event.comment.body, '/enqueue-for-merge') && github.event.issue.pull_request != null)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      checks: read
    steps:
      - name: Check if SonarQube Coverage Report passed (unless bypassed)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const hasBypassLabel = pr.data.labels.some(label => label.name === 'bypass-ci');
            if (hasBypassLabel) {
              console.log('CI check bypassed due to "bypass-ci" label.');
              return;
            }

            // Get all workflow runs on this branch
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: pr.data.head.ref,
            });

            console.log("Recent workflow runs on branch:");
            for (const run of runs.data.workflow_runs) {
              console.log(`- ${run.name}: conclusion=${run.conclusion}`);
            }

            const sonarRun = runs.data.workflow_runs.find(run =>
              run.name === 'run-piperks-ci / sonarqube-coverage-report' &&
              run.conclusion === 'success'
            );

            if (!sonarRun) {
              throw new Error('SonarQube report has not successfully completed on this branch.');
            }

            console.log('SonarQube check passed on some recent commit in this branch.');

      - name: Checkout private merge queue action repo
        uses: actions/checkout@v4
        with:
          repository: pi-xcels/merge-queue-action
          ref: v0.0.1
          token: ${{ secrets.MERGE_QUEUE_ACTION_PAT }}
          path: ./.github/actions/merge-queue-action

      - name: Run merge queue precheck
        uses: ./.github/actions/merge-queue-action/precheck
        with:
          required-codeowners: 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to merge queue branch
        run: |
          git push origin HEAD:merge-queue/${{ github.event.issue.number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dispatch workflow via GitHub CLI
        run: >
          gh workflow run -R ${{ github.event.repository.full_name }}
          -f issue_number=${{ github.event.issue.number }}
          -f tmp-ci-branch=merge-queue/${{ github.event.issue.number }}
          --ref merge-queue/${{ github.event.issue.number }} merge-queue-ci-runner.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
