name: Handle Merge Queue Trigger
on:
  issue_comment:
    types: [created]

jobs:
  CommentHandle:
    if: (contains(github.event.comment.body, '/mq') && github.event.issue.pull_request != null)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
    steps:
      - name: Print PR number
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "github.event.issue.number = ${{ github.event.issue.number }}"
          echo "github.event.inputs.issue_number = ${{ github.event.inputs.issue_number }}"
          echo "Using PR_NUMBER = ${{ github.event.issue.number || github.event.inputs.issue_number }}"

      - name: Check if SonarQube Coverage Report passed (unless bypassed)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const hasBypassLabel = pr.data.labels.some(label => label.name === 'bypass-ci');
            if (hasBypassLabel) {
              console.log('CI check bypassed due to "bypass-ci" label.');
              return;
            }

            const headSha = pr.data.head.sha;

            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: headSha,
            });

            const targetCheck = checks.data.check_runs.find(
              check => check.name === 'TestJavaScript'
            );

            if (!targetCheck) {
              throw new Error('SonarQube coverage check not found');
            }

            if (targetCheck.conclusion !== 'success') {
              throw new Error(`SonarQube check did not pass. Status: ${targetCheck.conclusion}`);
            }
    
      - uses: demo-merge-queue/merge-queue-action/precheck@main
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          git push origin HEAD:auto.${{ github.event.issue.number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Dispatch workflow via GitHub CLI
        run: >
          gh workflow run -R ${{ github.event.repository.full_name }}
          -f issue_number=${{ github.event.issue.number }}
          -f tmp-ci-branch=auto.${{ github.event.issue.number }}
          --ref auto.${{ github.event.issue.number }} testing-queue.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
